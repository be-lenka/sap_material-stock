<?php
/**
 * APIMATERIALSTOCKSRVAMaterialSerialNumberType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialStock
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Material Stock - Read
 *
 * This service enables you to retrieve material stock information using the OData protocol with filter data provided in the payload. It can be consumed by external warehouse applications.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\MaterialStock\Model;

use \ArrayAccess;
use \BeLenka\SAP\MaterialStock\ObjectSerializer;

/**
 * APIMATERIALSTOCKSRVAMaterialSerialNumberType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialStock
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIMATERIALSTOCKSRVAMaterialSerialNumberType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_MATERIAL_STOCK_SRV.A_MaterialSerialNumberType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'material' => 'string',
        'serial_number' => 'string',
        'plant' => 'string',
        'storage_location' => 'string',
        'inventory_special_stock_type' => 'string',
        'batch' => 'string',
        'inventory_stock_type' => 'string',
        'equipment' => 'string',
        'customer' => 'string',
        'supplier' => 'string',
        'sd_document' => 'string',
        'sd_document_item' => 'string',
        'wbs_element_internal_id' => 'string',
        'wbs_element_external_id' => 'string',
        'to_matl_stk_in_acct_mod' => '\BeLenka\SAP\MaterialStock\Model\APIMATERIALSTOCKSRVAMaterialSerialNumberTypeToMatlStkInAcctMod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'material' => null,
        'serial_number' => null,
        'plant' => null,
        'storage_location' => null,
        'inventory_special_stock_type' => null,
        'batch' => null,
        'inventory_stock_type' => null,
        'equipment' => null,
        'customer' => null,
        'supplier' => null,
        'sd_document' => null,
        'sd_document_item' => null,
        'wbs_element_internal_id' => null,
        'wbs_element_external_id' => null,
        'to_matl_stk_in_acct_mod' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'material' => false,
		'serial_number' => false,
		'plant' => true,
		'storage_location' => true,
		'inventory_special_stock_type' => true,
		'batch' => true,
		'inventory_stock_type' => true,
		'equipment' => true,
		'customer' => true,
		'supplier' => true,
		'sd_document' => true,
		'sd_document_item' => true,
		'wbs_element_internal_id' => true,
		'wbs_element_external_id' => true,
		'to_matl_stk_in_acct_mod' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material' => 'Material',
        'serial_number' => 'SerialNumber',
        'plant' => 'Plant',
        'storage_location' => 'StorageLocation',
        'inventory_special_stock_type' => 'InventorySpecialStockType',
        'batch' => 'Batch',
        'inventory_stock_type' => 'InventoryStockType',
        'equipment' => 'Equipment',
        'customer' => 'Customer',
        'supplier' => 'Supplier',
        'sd_document' => 'SDDocument',
        'sd_document_item' => 'SDDocumentItem',
        'wbs_element_internal_id' => 'WBSElementInternalID',
        'wbs_element_external_id' => 'WBSElementExternalID',
        'to_matl_stk_in_acct_mod' => 'to_MatlStkInAcctMod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material' => 'setMaterial',
        'serial_number' => 'setSerialNumber',
        'plant' => 'setPlant',
        'storage_location' => 'setStorageLocation',
        'inventory_special_stock_type' => 'setInventorySpecialStockType',
        'batch' => 'setBatch',
        'inventory_stock_type' => 'setInventoryStockType',
        'equipment' => 'setEquipment',
        'customer' => 'setCustomer',
        'supplier' => 'setSupplier',
        'sd_document' => 'setSdDocument',
        'sd_document_item' => 'setSdDocumentItem',
        'wbs_element_internal_id' => 'setWbsElementInternalId',
        'wbs_element_external_id' => 'setWbsElementExternalId',
        'to_matl_stk_in_acct_mod' => 'setToMatlStkInAcctMod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material' => 'getMaterial',
        'serial_number' => 'getSerialNumber',
        'plant' => 'getPlant',
        'storage_location' => 'getStorageLocation',
        'inventory_special_stock_type' => 'getInventorySpecialStockType',
        'batch' => 'getBatch',
        'inventory_stock_type' => 'getInventoryStockType',
        'equipment' => 'getEquipment',
        'customer' => 'getCustomer',
        'supplier' => 'getSupplier',
        'sd_document' => 'getSdDocument',
        'sd_document_item' => 'getSdDocumentItem',
        'wbs_element_internal_id' => 'getWbsElementInternalId',
        'wbs_element_external_id' => 'getWbsElementExternalId',
        'to_matl_stk_in_acct_mod' => 'getToMatlStkInAcctMod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_type', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('inventory_stock_type', $data ?? [], null);
        $this->setIfExists('equipment', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('sd_document', $data ?? [], null);
        $this->setIfExists('sd_document_item', $data ?? [], null);
        $this->setIfExists('wbs_element_internal_id', $data ?? [], null);
        $this->setIfExists('wbs_element_external_id', $data ?? [], null);
        $this->setIfExists('to_matl_stk_in_acct_mod', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['inventory_special_stock_type']) && (mb_strlen($this->container['inventory_special_stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['inventory_stock_type']) && (mb_strlen($this->container['inventory_stock_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'inventory_stock_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['equipment']) && (mb_strlen($this->container['equipment']) > 18)) {
            $invalidProperties[] = "invalid value for 'equipment', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sd_document']) && (mb_strlen($this->container['sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sd_document_item']) && (mb_strlen($this->container['sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['wbs_element_internal_id']) && (mb_strlen($this->container['wbs_element_internal_id']) > 8)) {
            $invalidProperties[] = "invalid value for 'wbs_element_internal_id', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['wbs_element_external_id']) && (mb_strlen($this->container['wbs_element_external_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element_external_id', the character length must be smaller than or equal to 24.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        if ((mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        if ((mb_strlen($serial_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 18.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            array_push($this->openAPINullablesSetToNull, 'plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant) && (mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets inventory_special_stock_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockType()
    {
        return $this->container['inventory_special_stock_type'];
    }

    /**
     * Sets inventory_special_stock_type
     *
     * @param string|null $inventory_special_stock_type Special Stock Indicator
     *
     * @return self
     */
    public function setInventorySpecialStockType($inventory_special_stock_type)
    {
        if (is_null($inventory_special_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_special_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_special_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_special_stock_type) && (mb_strlen($inventory_special_stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_type when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_type'] = $inventory_special_stock_type;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets inventory_stock_type
     *
     * @return string|null
     */
    public function getInventoryStockType()
    {
        return $this->container['inventory_stock_type'];
    }

    /**
     * Sets inventory_stock_type
     *
     * @param string|null $inventory_stock_type Stock Type of Goods Movement (Primary Posting)
     *
     * @return self
     */
    public function setInventoryStockType($inventory_stock_type)
    {
        if (is_null($inventory_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_stock_type) && (mb_strlen($inventory_stock_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inventory_stock_type when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 2.');
        }

        $this->container['inventory_stock_type'] = $inventory_stock_type;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return string|null
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param string|null $equipment Equipment Number
     *
     * @return self
     */
    public function setEquipment($equipment)
    {
        if (is_null($equipment)) {
            array_push($this->openAPINullablesSetToNull, 'equipment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equipment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($equipment) && (mb_strlen($equipment) > 18)) {
            throw new \InvalidArgumentException('invalid length for $equipment when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 18.');
        }

        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Special stock customer account number
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            array_push($this->openAPINullablesSetToNull, 'customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer) && (mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Account number of the vendor
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier) && (mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets sd_document
     *
     * @return string|null
     */
    public function getSdDocument()
    {
        return $this->container['sd_document'];
    }

    /**
     * Sets sd_document
     *
     * @param string|null $sd_document Sales Order Number
     *
     * @return self
     */
    public function setSdDocument($sd_document)
    {
        if (is_null($sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document) && (mb_strlen($sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sd_document when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 10.');
        }

        $this->container['sd_document'] = $sd_document;

        return $this;
    }

    /**
     * Gets sd_document_item
     *
     * @return string|null
     */
    public function getSdDocumentItem()
    {
        return $this->container['sd_document_item'];
    }

    /**
     * Sets sd_document_item
     *
     * @param string|null $sd_document_item Item Number in Sales Order
     *
     * @return self
     */
    public function setSdDocumentItem($sd_document_item)
    {
        if (is_null($sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_item) && (mb_strlen($sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_item when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 6.');
        }

        $this->container['sd_document_item'] = $sd_document_item;

        return $this;
    }

    /**
     * Gets wbs_element_internal_id
     *
     * @return string|null
     */
    public function getWbsElementInternalId()
    {
        return $this->container['wbs_element_internal_id'];
    }

    /**
     * Sets wbs_element_internal_id
     *
     * @param string|null $wbs_element_internal_id WBS Element
     *
     * @return self
     */
    public function setWbsElementInternalId($wbs_element_internal_id)
    {
        if (is_null($wbs_element_internal_id)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element_internal_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element_internal_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element_internal_id) && (mb_strlen($wbs_element_internal_id) > 8)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element_internal_id when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 8.');
        }

        $this->container['wbs_element_internal_id'] = $wbs_element_internal_id;

        return $this;
    }

    /**
     * Gets wbs_element_external_id
     *
     * @return string|null
     */
    public function getWbsElementExternalId()
    {
        return $this->container['wbs_element_external_id'];
    }

    /**
     * Sets wbs_element_external_id
     *
     * @param string|null $wbs_element_external_id Work Breakdown Structure Element (WBS Element) Edited
     *
     * @return self
     */
    public function setWbsElementExternalId($wbs_element_external_id)
    {
        if (is_null($wbs_element_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element_external_id) && (mb_strlen($wbs_element_external_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element_external_id when calling APIMATERIALSTOCKSRVAMaterialSerialNumberType., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element_external_id'] = $wbs_element_external_id;

        return $this;
    }

    /**
     * Gets to_matl_stk_in_acct_mod
     *
     * @return \BeLenka\SAP\MaterialStock\Model\APIMATERIALSTOCKSRVAMaterialSerialNumberTypeToMatlStkInAcctMod|null
     */
    public function getToMatlStkInAcctMod()
    {
        return $this->container['to_matl_stk_in_acct_mod'];
    }

    /**
     * Sets to_matl_stk_in_acct_mod
     *
     * @param \BeLenka\SAP\MaterialStock\Model\APIMATERIALSTOCKSRVAMaterialSerialNumberTypeToMatlStkInAcctMod|null $to_matl_stk_in_acct_mod to_matl_stk_in_acct_mod
     *
     * @return self
     */
    public function setToMatlStkInAcctMod($to_matl_stk_in_acct_mod)
    {
        if (is_null($to_matl_stk_in_acct_mod)) {
            throw new \InvalidArgumentException('non-nullable to_matl_stk_in_acct_mod cannot be null');
        }
        $this->container['to_matl_stk_in_acct_mod'] = $to_matl_stk_in_acct_mod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


